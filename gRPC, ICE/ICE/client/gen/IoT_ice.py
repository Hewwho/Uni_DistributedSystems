# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `IoT.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module IoT
_M_IoT = Ice.openModule('IoT')
__name__ = 'IoT'

if 'EX' not in _M_IoT.__dict__:
    _M_IoT.EX = Ice.createTempClass()
    class EX(Ice.UserException):
        def __init__(self, text=''):
            self.text = text

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::IoT::EX'

    _M_IoT._t_EX = IcePy.defineException('::IoT::EX', EX, (), False, None, (('text', (), IcePy._t_string, False, 0),))
    EX._ice_type = _M_IoT._t_EX

    _M_IoT.EX = EX
    del EX

if 'DeviceState' not in _M_IoT.__dict__:
    _M_IoT.DeviceState = Ice.createTempClass()
    class DeviceState(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    DeviceState.OFF = DeviceState("OFF", 0)
    DeviceState.ON = DeviceState("ON", 1)
    DeviceState._enumerators = { 0:DeviceState.OFF, 1:DeviceState.ON }

    _M_IoT._t_DeviceState = IcePy.defineEnum('::IoT::DeviceState', DeviceState, (), DeviceState._enumerators)

    _M_IoT.DeviceState = DeviceState
    del DeviceState

_M_IoT._t_Device = IcePy.defineValue('::IoT::Device', Ice.Value, -1, (), False, True, None, ())

if 'DevicePrx' not in _M_IoT.__dict__:
    _M_IoT.DevicePrx = Ice.createTempClass()
    class DevicePrx(Ice.ObjectPrx):

        def turnOn(self, context=None):
            return _M_IoT.Device._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_IoT.Device._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IoT.Device._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_IoT.Device._op_turnOn.end(self, _r)

        def turnOff(self, context=None):
            return _M_IoT.Device._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_IoT.Device._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IoT.Device._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_IoT.Device._op_turnOff.end(self, _r)

        def getName(self, context=None):
            return _M_IoT.Device._op_getName.invoke(self, ((), context))

        def getNameAsync(self, context=None):
            return _M_IoT.Device._op_getName.invokeAsync(self, ((), context))

        def begin_getName(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IoT.Device._op_getName.begin(self, ((), _response, _ex, _sent, context))

        def end_getName(self, _r):
            return _M_IoT.Device._op_getName.end(self, _r)

        def getState(self, context=None):
            return _M_IoT.Device._op_getState.invoke(self, ((), context))

        def getStateAsync(self, context=None):
            return _M_IoT.Device._op_getState.invokeAsync(self, ((), context))

        def begin_getState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IoT.Device._op_getState.begin(self, ((), _response, _ex, _sent, context))

        def end_getState(self, _r):
            return _M_IoT.Device._op_getState.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IoT.DevicePrx.ice_checkedCast(proxy, '::IoT::Device', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IoT.DevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IoT::Device'
    _M_IoT._t_DevicePrx = IcePy.defineProxy('::IoT::Device', DevicePrx)

    _M_IoT.DevicePrx = DevicePrx
    del DevicePrx

    _M_IoT.Device = Ice.createTempClass()
    class Device(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IoT::Device')

        def ice_id(self, current=None):
            return '::IoT::Device'

        @staticmethod
        def ice_staticId():
            return '::IoT::Device'

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def getName(self, current=None):
            raise NotImplementedError("servant method 'getName' not implemented")

        def getState(self, current=None):
            raise NotImplementedError("servant method 'getState' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IoT._t_DeviceDisp)

        __repr__ = __str__

    _M_IoT._t_DeviceDisp = IcePy.defineClass('::IoT::Device', Device, (), None, ())
    Device._ice_type = _M_IoT._t_DeviceDisp

    Device._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, ())
    Device._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, ())
    Device._op_getName = IcePy.Operation('getName', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Device._op_getState = IcePy.Operation('getState', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_IoT.Device = Device
    del Device

_M_IoT._t_Fridge = IcePy.defineValue('::IoT::Fridge', Ice.Value, -1, (), False, True, None, ())

if 'FridgePrx' not in _M_IoT.__dict__:
    _M_IoT.FridgePrx = Ice.createTempClass()
    class FridgePrx(_M_IoT.DevicePrx):

        def increaseTemperature(self, value, context=None):
            return _M_IoT.Fridge._op_increaseTemperature.invoke(self, ((value, ), context))

        def increaseTemperatureAsync(self, value, context=None):
            return _M_IoT.Fridge._op_increaseTemperature.invokeAsync(self, ((value, ), context))

        def begin_increaseTemperature(self, value, _response=None, _ex=None, _sent=None, context=None):
            return _M_IoT.Fridge._op_increaseTemperature.begin(self, ((value, ), _response, _ex, _sent, context))

        def end_increaseTemperature(self, _r):
            return _M_IoT.Fridge._op_increaseTemperature.end(self, _r)

        def decreaseTemperature(self, value, context=None):
            return _M_IoT.Fridge._op_decreaseTemperature.invoke(self, ((value, ), context))

        def decreaseTemperatureAsync(self, value, context=None):
            return _M_IoT.Fridge._op_decreaseTemperature.invokeAsync(self, ((value, ), context))

        def begin_decreaseTemperature(self, value, _response=None, _ex=None, _sent=None, context=None):
            return _M_IoT.Fridge._op_decreaseTemperature.begin(self, ((value, ), _response, _ex, _sent, context))

        def end_decreaseTemperature(self, _r):
            return _M_IoT.Fridge._op_decreaseTemperature.end(self, _r)

        def getTemperature(self, context=None):
            return _M_IoT.Fridge._op_getTemperature.invoke(self, ((), context))

        def getTemperatureAsync(self, context=None):
            return _M_IoT.Fridge._op_getTemperature.invokeAsync(self, ((), context))

        def begin_getTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IoT.Fridge._op_getTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemperature(self, _r):
            return _M_IoT.Fridge._op_getTemperature.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IoT.FridgePrx.ice_checkedCast(proxy, '::IoT::Fridge', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IoT.FridgePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IoT::Fridge'
    _M_IoT._t_FridgePrx = IcePy.defineProxy('::IoT::Fridge', FridgePrx)

    _M_IoT.FridgePrx = FridgePrx
    del FridgePrx

    _M_IoT.Fridge = Ice.createTempClass()
    class Fridge(_M_IoT.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IoT::Device', '::IoT::Fridge')

        def ice_id(self, current=None):
            return '::IoT::Fridge'

        @staticmethod
        def ice_staticId():
            return '::IoT::Fridge'

        def increaseTemperature(self, value, current=None):
            raise NotImplementedError("servant method 'increaseTemperature' not implemented")

        def decreaseTemperature(self, value, current=None):
            raise NotImplementedError("servant method 'decreaseTemperature' not implemented")

        def getTemperature(self, current=None):
            raise NotImplementedError("servant method 'getTemperature' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IoT._t_FridgeDisp)

        __repr__ = __str__

    _M_IoT._t_FridgeDisp = IcePy.defineClass('::IoT::Fridge', Fridge, (), None, (_M_IoT._t_DeviceDisp,))
    Fridge._ice_type = _M_IoT._t_FridgeDisp

    Fridge._op_increaseTemperature = IcePy.Operation('increaseTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_IoT._t_EX,))
    Fridge._op_decreaseTemperature = IcePy.Operation('decreaseTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_IoT._t_EX,))
    Fridge._op_getTemperature = IcePy.Operation('getTemperature', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), (_M_IoT._t_EX,))

    _M_IoT.Fridge = Fridge
    del Fridge

_M_IoT._t_Bulbulator = IcePy.defineValue('::IoT::Bulbulator', Ice.Value, -1, (), False, True, None, ())

if 'BulbulatorPrx' not in _M_IoT.__dict__:
    _M_IoT.BulbulatorPrx = Ice.createTempClass()
    class BulbulatorPrx(_M_IoT.DevicePrx):

        def doNothing(self, context=None):
            return _M_IoT.Bulbulator._op_doNothing.invoke(self, ((), context))

        def doNothingAsync(self, context=None):
            return _M_IoT.Bulbulator._op_doNothing.invokeAsync(self, ((), context))

        def begin_doNothing(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IoT.Bulbulator._op_doNothing.begin(self, ((), _response, _ex, _sent, context))

        def end_doNothing(self, _r):
            return _M_IoT.Bulbulator._op_doNothing.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IoT.BulbulatorPrx.ice_checkedCast(proxy, '::IoT::Bulbulator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IoT.BulbulatorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IoT::Bulbulator'
    _M_IoT._t_BulbulatorPrx = IcePy.defineProxy('::IoT::Bulbulator', BulbulatorPrx)

    _M_IoT.BulbulatorPrx = BulbulatorPrx
    del BulbulatorPrx

    _M_IoT.Bulbulator = Ice.createTempClass()
    class Bulbulator(_M_IoT.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IoT::Bulbulator', '::IoT::Device')

        def ice_id(self, current=None):
            return '::IoT::Bulbulator'

        @staticmethod
        def ice_staticId():
            return '::IoT::Bulbulator'

        def doNothing(self, current=None):
            raise NotImplementedError("servant method 'doNothing' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IoT._t_BulbulatorDisp)

        __repr__ = __str__

    _M_IoT._t_BulbulatorDisp = IcePy.defineClass('::IoT::Bulbulator', Bulbulator, (), None, (_M_IoT._t_DeviceDisp,))
    Bulbulator._ice_type = _M_IoT._t_BulbulatorDisp

    Bulbulator._op_doNothing = IcePy.Operation('doNothing', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), None, (_M_IoT._t_EX,))

    _M_IoT.Bulbulator = Bulbulator
    del Bulbulator

_M_IoT._t_MotionDetector = IcePy.defineValue('::IoT::MotionDetector', Ice.Value, -1, (), False, True, None, ())

if 'MotionDetectorPrx' not in _M_IoT.__dict__:
    _M_IoT.MotionDetectorPrx = Ice.createTempClass()
    class MotionDetectorPrx(_M_IoT.DevicePrx):

        def checkForDetection(self, context=None):
            return _M_IoT.MotionDetector._op_checkForDetection.invoke(self, ((), context))

        def checkForDetectionAsync(self, context=None):
            return _M_IoT.MotionDetector._op_checkForDetection.invokeAsync(self, ((), context))

        def begin_checkForDetection(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IoT.MotionDetector._op_checkForDetection.begin(self, ((), _response, _ex, _sent, context))

        def end_checkForDetection(self, _r):
            return _M_IoT.MotionDetector._op_checkForDetection.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IoT.MotionDetectorPrx.ice_checkedCast(proxy, '::IoT::MotionDetector', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IoT.MotionDetectorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IoT::MotionDetector'
    _M_IoT._t_MotionDetectorPrx = IcePy.defineProxy('::IoT::MotionDetector', MotionDetectorPrx)

    _M_IoT.MotionDetectorPrx = MotionDetectorPrx
    del MotionDetectorPrx

    _M_IoT.MotionDetector = Ice.createTempClass()
    class MotionDetector(_M_IoT.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IoT::Device', '::IoT::MotionDetector')

        def ice_id(self, current=None):
            return '::IoT::MotionDetector'

        @staticmethod
        def ice_staticId():
            return '::IoT::MotionDetector'

        def checkForDetection(self, current=None):
            raise NotImplementedError("servant method 'checkForDetection' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IoT._t_MotionDetectorDisp)

        __repr__ = __str__

    _M_IoT._t_MotionDetectorDisp = IcePy.defineClass('::IoT::MotionDetector', MotionDetector, (), None, (_M_IoT._t_DeviceDisp,))
    MotionDetector._ice_type = _M_IoT._t_MotionDetectorDisp

    MotionDetector._op_checkForDetection = IcePy.Operation('checkForDetection', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), (_M_IoT._t_EX,))

    _M_IoT.MotionDetector = MotionDetector
    del MotionDetector

_M_IoT._t_MotionDetectorButBroken = IcePy.defineValue('::IoT::MotionDetectorButBroken', Ice.Value, -1, (), False, True, None, ())

if 'MotionDetectorButBrokenPrx' not in _M_IoT.__dict__:
    _M_IoT.MotionDetectorButBrokenPrx = Ice.createTempClass()
    class MotionDetectorButBrokenPrx(_M_IoT.DevicePrx):

        def checkForDetection(self, context=None):
            return _M_IoT.MotionDetectorButBroken._op_checkForDetection.invoke(self, ((), context))

        def checkForDetectionAsync(self, context=None):
            return _M_IoT.MotionDetectorButBroken._op_checkForDetection.invokeAsync(self, ((), context))

        def begin_checkForDetection(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IoT.MotionDetectorButBroken._op_checkForDetection.begin(self, ((), _response, _ex, _sent, context))

        def end_checkForDetection(self, _r):
            return _M_IoT.MotionDetectorButBroken._op_checkForDetection.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IoT.MotionDetectorButBrokenPrx.ice_checkedCast(proxy, '::IoT::MotionDetectorButBroken', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IoT.MotionDetectorButBrokenPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IoT::MotionDetectorButBroken'
    _M_IoT._t_MotionDetectorButBrokenPrx = IcePy.defineProxy('::IoT::MotionDetectorButBroken', MotionDetectorButBrokenPrx)

    _M_IoT.MotionDetectorButBrokenPrx = MotionDetectorButBrokenPrx
    del MotionDetectorButBrokenPrx

    _M_IoT.MotionDetectorButBroken = Ice.createTempClass()
    class MotionDetectorButBroken(_M_IoT.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IoT::Device', '::IoT::MotionDetectorButBroken')

        def ice_id(self, current=None):
            return '::IoT::MotionDetectorButBroken'

        @staticmethod
        def ice_staticId():
            return '::IoT::MotionDetectorButBroken'

        def checkForDetection(self, current=None):
            raise NotImplementedError("servant method 'checkForDetection' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IoT._t_MotionDetectorButBrokenDisp)

        __repr__ = __str__

    _M_IoT._t_MotionDetectorButBrokenDisp = IcePy.defineClass('::IoT::MotionDetectorButBroken', MotionDetectorButBroken, (), None, (_M_IoT._t_DeviceDisp,))
    MotionDetectorButBroken._ice_type = _M_IoT._t_MotionDetectorButBrokenDisp

    MotionDetectorButBroken._op_checkForDetection = IcePy.Operation('checkForDetection', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), (_M_IoT._t_EX,))

    _M_IoT.MotionDetectorButBroken = MotionDetectorButBroken
    del MotionDetectorButBroken

if '_t_deviceList' not in _M_IoT.__dict__:
    _M_IoT._t_deviceList = IcePy.defineSequence('::IoT::deviceList', (), IcePy._t_string)

_M_IoT._t_Devices = IcePy.defineValue('::IoT::Devices', Ice.Value, -1, (), False, True, None, ())

if 'DevicesPrx' not in _M_IoT.__dict__:
    _M_IoT.DevicesPrx = Ice.createTempClass()
    class DevicesPrx(Ice.ObjectPrx):

        def getDeviceList(self, context=None):
            return _M_IoT.Devices._op_getDeviceList.invoke(self, ((), context))

        def getDeviceListAsync(self, context=None):
            return _M_IoT.Devices._op_getDeviceList.invokeAsync(self, ((), context))

        def begin_getDeviceList(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_IoT.Devices._op_getDeviceList.begin(self, ((), _response, _ex, _sent, context))

        def end_getDeviceList(self, _r):
            return _M_IoT.Devices._op_getDeviceList.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_IoT.DevicesPrx.ice_checkedCast(proxy, '::IoT::Devices', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_IoT.DevicesPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::IoT::Devices'
    _M_IoT._t_DevicesPrx = IcePy.defineProxy('::IoT::Devices', DevicesPrx)

    _M_IoT.DevicesPrx = DevicesPrx
    del DevicesPrx

    _M_IoT.Devices = Ice.createTempClass()
    class Devices(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::IoT::Devices')

        def ice_id(self, current=None):
            return '::IoT::Devices'

        @staticmethod
        def ice_staticId():
            return '::IoT::Devices'

        def getDeviceList(self, current=None):
            raise NotImplementedError("servant method 'getDeviceList' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_IoT._t_DevicesDisp)

        __repr__ = __str__

    _M_IoT._t_DevicesDisp = IcePy.defineClass('::IoT::Devices', Devices, (), None, ())
    Devices._ice_type = _M_IoT._t_DevicesDisp

    Devices._op_getDeviceList = IcePy.Operation('getDeviceList', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_IoT._t_deviceList, False, 0), ())

    _M_IoT.Devices = Devices
    del Devices

# End of module IoT
